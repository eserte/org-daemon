#!/usr/bin/perl -w
# -*- perl -*-

#
# Author: Slaven Rezic
#
# Copyright (C) 2017 Slaven Rezic. All rights reserved.
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.
#
# Mail: slaven@rezic.de
# WWW:  http://www.rezic.de/eserte/
#

use strict;
use lib "/home/e/eserte/src/CPAN/App-orgdaemon/bin", "/mnt/cvrsnica/home/e/eserte/src/CPAN/App-orgdaemon/bin";
require "org-daemon";
use Digest::MD5 'md5_base64';
use POSIX 'strftime', 'ceil';
use File::Copy 'cp';

my $todo_file = "/mnt/cvrsnica/home/e/eserte/doc/misc/TODO";
my $todo_mtime = (stat($todo_file))[9];
my $out_ics = "/home/eserte/trash/htdocs/TODO.ics";
if (-e $out_ics) {
    cp $out_ics, "$out_ics.bak";
}

my @todo_dates = App::orgdaemon::find_dates_in_org_file($todo_file, include_timeless => 1);

open my $ofh, ">", "$out_ics~" or die $!;
chmod 0644, "$out_ics~" or die $!;
binmode $ofh, ':encoding(utf-8)';
print $ofh <<EOF;
BEGIN:VCALENDAR
VERSION:2.0
CALSCALE:GREGORIAN
PRODID:-//Slaven Rezic//NONSGML rezic.de org2ical 0.03//EN
EOF

#BEGIN:VTIMEZONE
#TZID:Europe/Berlin
#BEGIN:STANDARD
#DTSTART:19961027T030000
#RRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU
#TZNAME:MEZ
#TZOFFSETFROM:+0200
#TZOFFSETTO:+0100
#END:STANDARD
#BEGIN:DAYLIGHT
#DTSTART:19810329T020000
#RRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU
#TZNAME:MESZ
#TZOFFSETFROM:+0100
#TZOFFSETTO:+0200
#END:DAYLIGHT
#END:VTIMEZONE

for my $todo_date (reverse @todo_dates) {
    if ($todo_date->{text} !~ m{:homecomputer:}) {
	my $uid = md5_base64($todo_date->id) . '@rezic.de';
	my $dtstamp = strftime "%Y%m%dT%H%M%SZ", gmtime $todo_mtime;
	my $dtstart = $todo_date->start_is_timeless ? strftime("DTSTART;VALUE=DATE:%Y%m%d", localtime $todo_date->{epoch}) : strftime("DTSTART:%Y%m%dT%H%M%SZ", gmtime $todo_date->{epoch});
	my $dtend;
	if ($todo_date->date_end) {
	    # rfc5545: If such a "VEVENT" (daily reminder) has a "DTEND" property, it MUST be specified as a DATE value also.
	    $dtend = $todo_date->end_is_timeless || $todo_date->start_is_timeless ? strftime("DTEND;VALUE=DATE:%Y%m%d", localtime($todo_date->epoch_end + 86400)) : strftime("DTEND:%Y%m%dT%H%M%SZ", gmtime $todo_date->epoch_end);
	}
	my $description = $todo_date->formatted_text; # XXX description vs. summary?
	my $early_warning_min = ceil(($todo_date->{epoch} - ($todo_date->{early_warning_epoch} || 5*60)) / 60);
	$description =~ s{\s+:.*}{};
	$description =~ s{\s+<.*>$}{};
	$description =~ s{,}{\\,}g;
	my $vcal = <<"EOF";
BEGIN:VEVENT
UID:$uid
$dtstart
EOF
	if (defined $dtend) {
	    $vcal .= $dtend . "\n";
	}
	$vcal .= <<"EOF";
CREATED:$dtstamp
DTSTAMP:$dtstamp
LAST-MODIFIED:$dtstamp
SUMMARY:$description
TRANSP:OPAQUE
BEGIN:VALARM
ACTION:DISPLAY
DESCRIPTION:Erinnerung
TRIGGER:-PT${early_warning_min}M
UID:ALARM-$uid
END:VALARM
END:VEVENT
EOF
	print $ofh $vcal;
#	my($tmpfh,$tmpfile) = tempfile(UNLINK => 1, SUFFIX => '.ics');
#	binmode $tmpfh, ':encoding(utf-8)';
#	print $tmpfh $vcal;
#	#binmode STDOUT, ':encoding(utf-8)'; print $vcal;
#	close $tmpfh or die $!;
#
#	my @cmd = ('calypso', '--import', 'calendar/dav/x/user', $tmpfile);
#	print STDERR "@cmd...\n";
#	system @cmd;
#	if ($? != 0) {
#	    die "Command failed: $?; ics file: " . `cat $tmpfile`;
#	}
    }
}

print $ofh <<EOF;
END:VCALENDAR
EOF

close $ofh or die $!;
if (-r $out_ics) {
    require File::Compare;
    if (File::Compare::compare($out_ics, "$out_ics~") == 0) {
	warn ".ics file dies not change\n";
	exit 0;
    } else {
	system 'diff', '-u', $out_ics, "$out_ics~";
    }
}
rename "$out_ics~", $out_ics or die $!;

__END__
